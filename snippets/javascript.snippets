snippet req
	let ${1:React} = require('${2}');
	${0}
snippet req2
	${1:module}: require('./$1'),
snippet req3
	let { ${1} } = require('${2}');
	${0}
snippet reqall
	let React             = require('react');
	let { connect }       = require('react-redux');
	let bs                = require('react-bootstrap');
	let { LinkContainer } = require('react-router-bootstrap');
	let { 
		${1}
	} = require('./actions');
	let {
		${2}
	} = require('./components');

snippet comp
	let ${1:component} = React.createClass({
		propTypes: {
			${2:prop} : React.PropTypes.${3:any.isRequired}
		},

		render() {
			const { $2 } = this.props;
			return (
				${0}
			);
		}
	});

	module.exports = $1;

snippet msp
	function mapStateToProps(state) {
		return {
		  ${1:} : state.$1,${0}
		};
	}
	
snippet mdp
	function mapDispatchToProps(dispatch) {
		return {
			${1:actions}: bindActionCreators($1, dispatch)${0}
		};
	}
	
snippet cs
	let cx = React.addons.classSet;
snippet cdm
	componentDidMount() {
		${1}
	},
snippet cdup
	componentDidUpdate(prevProps, prevState) {
		${1}
	},
snippet cwm
	componentWillMount() {
		${1}
	},
snippet cwr
	componentWillReceiveProps(nextProps) {
		${1}
	},
snippet cwun
	componentWillUnmount() {
		${1}
	},
snippet cwu
	componentWillUpdate(nextProps, nextState) {
		${1}
	},
snippet cx
	cx({
		${1}: ${2}
	});
snippet fup
	forceUpdate(${1:callback});
snippet gdp
	getDefaultProps() {
		return {
			${1}
		};
	},
snippet gis
	getInitialState() {
		return {
			${1}: ${2}
		};
	},
snippet ism
	isMounted()
snippet jsx
	/**
	 * @jsx React.DOM
	 */
snippet pt
	propTypes: {
		${1}: React.PropTypes.${2:string}
	},
snippet rcc
	let React                  = require('react');
	let { RouteHandler, Link } = require('react-router');
	let bs                     = require('react-bootstrap');

	let ${1:ClassName} = React.createClass({
		render() {
			const {} = this.props;
			return (
				${0:<div>$1</div>}
			);
		}
	});

	module.exports = $1;
snippet ren
	render() {
		return (
			${1:<div />}
		);
	}
snippet sst
	setState({
		${1}: ${2}
	});
snippet scu
	shouldComponentUpdate(nextProps, nextState) {
		${1}
	},
snippet props
	this.props.${1}
snippet state
	this.state.${1}
snippet trp
	transferPropsTo(${1});
